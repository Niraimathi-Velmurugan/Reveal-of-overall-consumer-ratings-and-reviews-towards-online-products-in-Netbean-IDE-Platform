package BUSINESS;

import DATA.DB;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Set;
import java.util.Vector;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

/**
 *
 * @author alaguraj
 */
public class sentiword extends HttpServlet {

    private String pathToSWN = "D:\\SentiWordNet_3.0.0_20130122.txt";
    private HashMap<String, Double> _dict;
    ArrayList list = new ArrayList();
    ArrayList list1 = new ArrayList();

    public sentiword() {

        _dict = new HashMap<String, Double>();
        HashMap<String, Vector<Double>> _temp = new HashMap<String, Vector<Double>>();
        try {
            BufferedReader csv = new BufferedReader(new FileReader(pathToSWN));
            String line = "";
            while ((line = csv.readLine()) != null) {
                String[] data = line.split("\t");
                Double score = Double.parseDouble(data[2]) - Double.parseDouble(data[3]);
                String[] words = data[4].split(" ");
                for (String w : words) {
                    String[] w_n = w.split("#");
                    w_n[0] += "#" + data[0];
                    int index = Integer.parseInt(w_n[1]) - 1;
                    if (_temp.containsKey(w_n[0])) {
                        Vector<Double> v = _temp.get(w_n[0]);
                        if (index > v.size()) {
                            for (int i = v.size(); i < index; i++) {
                                v.add(0.0);
                            }
                        }
                        v.add(index, score);
                        _temp.put(w_n[0], v);
                    } else {
                        Vector<Double> v = new Vector<Double>();
                        for (int i = 0; i < index; i++) {
                            v.add(0.0);
                        }
                        v.add(index, score);
                        _temp.put(w_n[0], v);
                    }
                }
            }
            Set<String> temp = _temp.keySet();
            for (Iterator<String> iterator = temp.iterator(); iterator.hasNext();) {
                String word = (String) iterator.next();
                Vector<Double> v = _temp.get(word);
                double score = 0.0;
                double sum = 0.0;
                for (int i = 0; i < v.size(); i++) {
                    score += ((double) 1 / (double) (i + 1)) * v.get(i);
                }
                for (int i = 1; i <= v.size(); i++) {
                    sum += (double) 1 / (double) i;
                }
                score /= sum;
                String sent = "";
                if (score >= 0.75) {
                    sent = "strong_positive";
                } else if (score > 0.25 && score <= 0.5) {
                    sent = "positive";
                } else if (score > 0 && score >= 0.25) {
                    sent = "weak_positive";
                } else if (score < 0 && score >= -0.25) {
                    sent = "weak_negative";
                } else if (score < -0.25 && score >= -0.5) {
                    sent = "negative";
                } else if (score <= -0.75) {
                    sent = "strong_negative";
                }
                _dict.put(word, score);
                System.out.println(word + "," + score);
            }
        } catch (Exception e) {
            System.out.println("new error" + e);
            e.printStackTrace();
        }

    }

    public Double extract(String word) {
        Double total = new Double(0);
        if (_dict.get(word + "#n") != null) {
            total = _dict.get(word + "#n") + total;
        }
        if (_dict.get(word + "#a") != null) {
            total = _dict.get(word + "#a") + total;
        }
        if (_dict.get(word + "#r") != null) {
            total = _dict.get(word + "#r") + total;
        }
        if (_dict.get(word + "#v") != null) {
            total = _dict.get(word + "#v") + total;
        }
        return total;
    }

    /**
     * Processes requests for both HTTP
     * <code>GET</code> and
     * <code>POST</code> methods.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    protected void processRequest(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        response.setContentType("text/html;charset=UTF-8");
        PrintWriter out = response.getWriter();
        HttpSession session = request.getSession(true);
        ArrayList aalst = new ArrayList();
        SimpleDateFormat yt = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
        java.util.Date dt = new java.util.Date();
        String ste = yt.format(dt);
        String name = request.getParameter("uname");
        String ptblID = request.getParameter("pallid");
        String code = request.getParameter("cdeop");
        String sentence = request.getParameter("review-textarea");
        String NOUNS = request.getParameter("NOUN");
        String VERBS = request.getParameter("VERB");
        String TWDS = request.getParameter("NNN");
        String[] ddd = TWDS.split("/");
        /* String[] FnlDtd = new String[ddd.length];
         for (int gb = 0; gb < (ddd.length); gb++) {
         String amsa[] = ddd[gb].split("/");
         for (int gb1 = 0; gb1 < (amsa.length); gb1++) {
         aalst.add(amsa[gb1]);
         }
         }*/
        String aaaaaa = new String("");
        String[] FnlDtd = new String[ddd.length];
        for (int gb = 0; gb < (ddd.length); gb++) {
            String amsa[] = ddd[gb].split("/");
            for (int gb1 = 0; gb1 < (amsa.length); gb1++) {
                String amsa1[] = amsa[gb1].split(" ");
                for (int gb12 = 1; gb12 < (amsa1.length); gb12++) {
                    aaaaaa += amsa1[0] + "-" + amsa1[gb12];
                    aalst.add(amsa[gb1]);
                }
            }
        }
        try {
            DB tv = new DB();
            sentiword test = new sentiword();
            //String sentence="The SentiWordNet interface not provides the possibily to accept user feedback on the values assigned to synsets.";
            String[] words = sentence.split("\\s+");
            double totalScore = 0;
            for (String word : words) {
                word = word.replaceAll("([^a-zA-Z\\s])", "");
                if (test.extract(word) == null) {
                    continue;
                }
                totalScore += test.extract(word);
                //  System.out.println(word+":"+test.extract(word));
                if (test.extract(word) >= 0.1) {
                    System.out.println("opinion" + word + ":" + test.extract(word));
                    list.add(word + ":" + test.extract(word) + "\n");
                } else {
                    list1.add(word + ":" + test.extract(word) + "\n");
                }
            }
            String s = list.toString();
            String s1 = list1.toString();
            try {
                ResultSet rs5 = tv.Select("select sum(Pdt_AllSCORE) as total from prdtreviews where P_CODE='" + code + "'");
                double totalScore1 = 0;
                if (rs5.next()) {
                    totalScore1 = rs5.getDouble("total") + totalScore;
                }
                System.out.println("Total SCORE IS " + totalScore);
                System.out.println("insert into prdtreviews(ALL_ID,A_Time,U_Name,P_ID,F_Back,TARGET,P_CODE,Pdt_AllSCORE,WORD) values('" + ptblID + "','" + ste + "','" + name + "','" + ptblID + "','" + sentence + "','" + NOUNS + "','" + code + "','" + totalScore1 + "','" + VERBS + "')");
                int g = tv.Insert("insert into prdtreviews(ALL_ID,A_Time,U_Name,P_ID,F_Back,TARGET,P_CODE,Pdt_AllSCORE,WORD) values('" + ptblID + "','" + ste + "','" + name + "','" + ptblID + "','" + sentence + "','" + NOUNS + "','" + code + "','" + totalScore1 + "','" + VERBS + "')");
                String RRID = GetReviewID();
                /*for (int gb1 = 0; gb1 < (ddd.length); gb1++) {
                 String amsa[] = ddd[gb1].split(" ");
                 for (int vbb = 1; vbb < (amsa.length); vbb++) {
                 int g1 = tv.Insert("insert into target_word(Pdt_Code,Pdt_Target,Pdt_Word,Rvw_ID) values('" + code + "','" + amsa[0] + "','" + amsa[vbb] + "','" + RRID + "')");
                 }
                 }*/
                for (int gb1 = 0; gb1 < (ddd.length); gb1++) {
                    String amsa[] = ddd[gb1].split(" ");
                    for (int vbb = 1; vbb < (amsa.length); vbb++) {
                        if ((amsa[vbb] != null)&&(!(amsa[vbb].equals("")))) {
                            int g1 = tv.Insert("insert into target_word(Pdt_Code,Pdt_Target,Pdt_Word,Rvw_ID) values('" + code + "','" + amsa[0] + "','" + amsa[vbb] + "','" + RRID + "')");
                        }
                    }
                }
                list.clear();
                list1.clear();
                response.sendRedirect("UsrOrderList.jsp");
            } catch (Exception e) {
                System.out.println("error" + e);
                out.println(e);
            }
            out.println("Total Score:" + totalScore);
        } catch (Exception v) {
            out.println(v);
            System.out.println("error" + v);
        } finally {
            out.close();
        }
    }
// <editor-fold defaultstate="collapsed" desc="HttpServlet methods. Click on the + sign on the left to edit the code.">

    /**
     * Handles the HTTP
     * <code>GET</code> method.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        processRequest(request, response);
    }

    /**
     * Handles the HTTP
     * <code>POST</code> method.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        processRequest(request, response);
    }

    /**
     * Returns a short description of the servlet.
     *
     * @return a String containing servlet description
     */
    @Override
    public String getServletInfo() {
        return "Short description";
    }// </editor-fold>

    private String GetReviewID() throws SQLException {
        DB tv = new DB();
        String RID = new String();
        ResultSet rs5 = tv.Select("select * from prdtreviews");
        if (rs5.last()) {
            RID = rs5.getString("ID");
        }
        return RID;
    }
}
